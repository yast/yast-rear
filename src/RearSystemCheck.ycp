/* ------------------------------------------------------------------------------
 * Copyright (c) 2012 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

 /**
 * File:	modules/RearSystemCheck.ycp
 * Package:	system checks for rear support
 * Summary:	checks if the system is supported by rear
 * Authors:	Thomas Goettlicher <tgoettlicher@suse.de>
 *
 * $Id$
 *
 * Checks if the system is supported by rear
 */

{

module "RearSystemCheck";
textdomain "rear";

import "FileUtils";
import "Storage";


/*
 * check bootloader
 * returns error message if system is not supported
*/
list<string> SystemCheckBootloader()
{
  list <string> unsupported = [];

  if (FileUtils::Exists ("/etc/sysconfig/bootloader"))
  {
      string loader_type = (string) SCR::Read (.sysconfig.bootloader.LOADER_TYPE);
      if (loader_type == nil)
      {
           y2error("Not supported by rear: Cannot figure out which bootloader is used.");
           unsupported=add(unsupported,_("Cannot figure out which bootloader is used."));
      }
      if (loader_type != "grub")
      {
           y2error(sformat("Not supported by rear: bootloader %1 is used.", loader_type));
           unsupported=add(unsupported,sformat(_("Bootloader %1 is used."), loader_type));
      }

  }
  else
  {
      y2error("Not supported by rear: Cannot figure out which bootloader is used.");
      unsupported=add(unsupported,_("Cannot figure out which bootloader is used."));
  }

  return unsupported;
}

/*
 * checks disc for
 *  - iscsi
 *  - multipath
 *  - mountby uuid
 *  - filesystem
 * returns error message if system is not supported, otherwise nil
*/
list <string> SystemCheckDisk()
{

    map<string, map> storage = Storage::GetTargetMap();
    list<symbol> supportedfs = [ `ext2, `ext3, `ext4, `tmpfs, `swap, `none, `nfs, `nfs4 ];
    list <string> unsupported = [];

    foreach (string device, map devicemap, storage , {
       // check devices
       if ( devicemap["transport"]:`none == `iscsi  )
       {
           y2error( sformat("Not supported by rear: Device %1 is iscsi.", device ));
           unsupported=add(unsupported,sformat(_("Device %1 is iscsi."), device));
       }

       if ( devicemap["type"]:`none == `CT_DMMULTIPATH )
       {
           y2error( sformat("Not supported by rear: Device %1 is multipath.", device ));
           unsupported=add(unsupported,sformat(_("Device %1 is multipath."), device));
       }

       list <map> parts = devicemap["partitions"]:[];
       foreach (map part, parts , {
          string dev = part["device"]:"";

          // check partitions
          if ( part["mountby"]:`none == `uuid )
          {
             y2error( sformat("Not supported by rear: Partition %1 is mounted by uuid.", dev ));
             unsupported=add(unsupported,sformat(_("Partition %1 is mounted by uuid."), dev));
          }

          if ( ! contains(supportedfs, part["used_fs"]:`none) )
          {
             y2error( sformat("Not supported by rear: Partition %1 uses an unsupported filesystem (%2).", dev, part["used_fs"]:`none)) ;
             unsupported=add(unsupported,sformat(_("Partition %1 uses an unsupported filesystem (%2)."), dev, part["used_fs"]:`none));
          }

       });

     });

    return unsupported;
}






/*
 * runs all system checks
 * make sure to add your function call here if you add further checks
 * returns error message if system is not supported, otherwise nil
*/

global list <string> SystemCheck()
{
    list <string> unsupported = [];

    unsupported = (list<string>) merge(unsupported, SystemCheckDisk());
    unsupported = (list<string>) merge(unsupported, SystemCheckBootloader());

    return unsupported;
}


/* EOF */
}
