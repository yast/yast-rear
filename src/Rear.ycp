/* ------------------------------------------------------------------------------
 * Copyright (c) 2012 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

 /**
 * File:	modules/Rear.ycp
 * Package:	Configuration of rear
 * Summary:	Rear settings, input and output functions
 * Authors:	Thomas Goettlicher <tgoettlicher@suse.de>
 *
 * $Id$
 *
 * Representation of the Rear configuration.
 * Input and output routines.
 */

{

module "Rear";
textdomain "rear";

import "FileUtils";
import "Storage";

// Data was modified?
global boolean modified = false;

global string backup = "";
global string output = "";
global string netfs_url = "";
global boolean netfs_keep_old_backup = true;
global list<string> modules_load = [];
global list<string> backup_prog_include = [];
global map<string,string> usbpartitions = $[];


/*
 * Returns a Map of Partitons on USB Volumes
 *
*/
global map<string,string> GetUsbPartitions ()
{
    list<string> usbdevs = [];
    map <string, string> usbparts = $[];

    map<string, map> storage = Storage::ReReadTargetMap();

    foreach (string device, map devicemap, storage,
    {
        if ( devicemap["transport"]:`none == `usb )
        {
            list <map> parts = devicemap["partitions"]:[];
            foreach (map part, parts ,
            {
                string  dev = part["device"]:"";
		integer size_k = part["size_k"]:0 ;
                usbparts[sformat("usb://%1", dev)]=sformat ("%1 (%2)", dev, Storage::KByteToHumanString(size_k));
            });

        }
    });
    usbpartitions = usbparts;
    return usbparts;
}



/*
 * Convert List from Config File to YCP List
*/
list<string> RearListToYCPList ( string rearlist ) {
    list<string> ycplist = [];
    list<string> ycplisttmp = [];

    if (rearlist == nil)
        return [];

    // remove brakets
    rearlist = regexpsub (rearlist, "^ *\\((.*)\\) *$", "\\1");

    // split string seperated by spaces into a string list, respect backslash escaped blanks
    ycplisttmp = splitstring (rearlist, " ");
    string buffer = "";
    foreach (string elem, ycplisttmp,
    {
        integer length = size(elem);
        if ( substring(elem, length-1, 1) == "\\" )
        {
             buffer = buffer + substring(elem, 0, length - 1) + " ";
        }
        else
        {
             buffer = buffer + elem;
	     ycplist = add ( ycplist, buffer);
             buffer = "";
        }
    });

    // remove empty elements
    ycplist = filter (string element, ycplist, { return (element != ""); });

    return ycplist;
}


/*
 * Convert YCP List to Format for Config File
*/
string YCPListToRearList ( list<string> ycplist ) {
    list <string> escaped = [];
    // escape blanks in directories with a backslash
    foreach (string elem, ycplist, { escaped = add(escaped, mergestring(splitstring(elem," "),"\\ " )); });
    return "(" + mergestring (escaped, " " ) + ")";
}

/**
 * Read rear settings from /etc/rear/local.conf
 * returns true when file exists
 */
global boolean ReadSysconfig ()
{
    if (FileUtils::Exists ("/etc/rear/local.conf"))
    {
	backup = (string) SCR::Read(.etc.rear_conf.v.BACKUP);
	if (backup == nil)
	    backup = "";

	output = (string) SCR::Read (.etc.rear_conf.v.OUTPUT);
	if (output == nil)
	    output = "";

	netfs_url = (string) SCR::Read (.etc.rear_conf.v.NETFS_URL);
	if (netfs_url == nil)
	    netfs_url = "";


        // rear interprets all non-empty values as yes
	string netfs_keep_old_backup_tmp = (string) SCR::Read (.etc.rear_conf.v.NETFS_KEEP_OLD_BACKUP_COPY);
	if ( netfs_keep_old_backup_tmp != "" && netfs_keep_old_backup_tmp != nil  )
	    netfs_keep_old_backup = true;
        else
	    netfs_keep_old_backup = false;

	string modules_load_tmp = (string) SCR::Read (.etc.rear_conf.v.MODULES_LOAD);
        modules_load = RearListToYCPList( modules_load_tmp);

	string backup_prog_include_tmp = (string) SCR::Read (.etc.rear_conf.v.BACKUP_PROG_INCLUDE);
        backup_prog_include = RearListToYCPList( backup_prog_include_tmp);

	return true;
    }
    return false;
}

/**
 * Read all rear settings
 */
global boolean Read ()
{
    GetUsbPartitions ();
    ReadSysconfig ();
    return true;
}

/**
 * Write all rear settings
 */
global boolean Write ()
{
    if (!modified)
	return true;

    SCR::Write (.etc.rear_conf.v.BACKUP, "NETFS");

    if (output != "")
	SCR::Write (.etc.rear_conf.v.OUTPUT, output);

    if (netfs_url != "")
	SCR::Write (.etc.rear_conf.v.NETFS_URL, netfs_url);

    if (netfs_keep_old_backup != nil)
        if ( netfs_keep_old_backup )
	    SCR::Write (.etc.rear_conf.v.NETFS_KEEP_OLD_BACKUP_COPY, "yes" );
        else
	    SCR::Write (.etc.rear_conf.v.NETFS_KEEP_OLD_BACKUP_COPY, "" );

    if (modules_load != [])
	SCR::Write (.etc.rear_conf.v.MODULES_LOAD, YCPListToRearList(modules_load));

    if (backup_prog_include != [])
	SCR::Write (.etc.rear_conf.v.BACKUP_PROG_INCLUDE, YCPListToRearList(backup_prog_include));

    SCR::Write (.etc.rear_conf, nil);

    return true;
// FIXME shouldn't this return other value than just true? can writing fail? If it fails, please report an error

// FIXME usually, direct SCR calls are in separate functions, and those are called from Write. But this is just cosmetic
}

/* EOF */
}
